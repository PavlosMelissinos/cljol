digraph {
graph [layout=dot,rankdir=LR];
"28992379696" ["scc-num-nodes"=1,label="24 bytes
2 objects, 168 bytes reachable
this object in no reference cycles
clojure.core.VecNode
12: edit (ref) nil
16: arr (ref) ->
val maybe realizes if str'ed",shape=box];
"28992379720" ["scc-num-nodes"=1,label="144 bytes
1 object, 144 bytes reachable
this object in no reference cycles
array of 32 j.l.Object

[nil nil nil nil nil nil nil nil nil nil nil nil n ...",shape=box];
"28995335904" ["scc-num-nodes"=1,label="16 bytes
1 object, 16 bytes reachable
this object in no reference cycles
clojure.core$reify__8302
12: __meta (ref) nil
val maybe realizes if str'ed",shape=box];
"32257398312" ["scc-num-nodes"=1,style=filled,label="40 bytes
5 objects, 320 bytes reachable
this object in no reference cycles
clojure.core.Vec
12: cnt (int) 10
16: shift (int) 5
20: am (ref) ->
24: root (ref) ->
28: tail (ref) ->
32: _meta (ref) nil
clojure.core.Vec@9ebadac6",shape=box];
"32257398352" ["scc-num-nodes"=1,label="96 bytes
1 object, 96 bytes reachable
this object in no reference cycles
array of 10 long

[0 1 2 3 4 5 6 7 8 9]",shape=box];
"28992379696" -> "28992379720" ["field-name"=arr,label=arr];
"32257398312" -> "28995335904" ["field-name"=am,label=am];
"32257398312" -> "28992379696" ["field-name"=root,label=root];
"32257398312" -> "32257398352" ["field-name"=tail,label=tail];
} 