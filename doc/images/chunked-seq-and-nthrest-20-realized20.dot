digraph {
graph [layout=dot,rankdir=LR];
"31898530784" ["scc-num-nodes"=1,label="32 bytes
40 objects, 1128 bytes reachable
this object in no reference cycles
c.l.ChunkedCons
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: chunk (ref) ->
28: _more (ref) ->
val maybe realizes if str'ed",shape=box];
"31898491264" ["scc-num-nodes"=1,label="64 bytes
2 objects, 88 bytes reachable
this object in no reference cycles
c.l.LongRange
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: start (long) 32
32: end (long) 1000
40: step (long) 1
48: boundsCheck (ref) ->
52: _chunk (ref) nil
56: _chunkNext (ref) nil
60: _next (ref) nil
val maybe realizes if str'ed",shape=box];
"31896926152" ["scc-num-nodes"=1,label="16 bytes
1 object, 16 bytes reachable
this object in no reference cycles
user$fn__7029
12: __methodImplCache (ref) nil
val maybe realizes if str'ed",shape=box];
"28992354792" ["scc-num-nodes"=1,label="16 bytes
1 object, 16 bytes reachable
this object in no reference cycles
j.u.c.atomic.AtomicReference
12: value (ref) nil
val maybe realizes if str'ed",shape=box];
"28991038320" ["scc-num-nodes"=1,label="24 bytes
3 objects, 184 bytes reachable
this object in no reference cycles
c.l.PersistentVector$Node
12: edit (ref) ->
16: array (ref) ->
val maybe realizes if str'ed",shape=box];
"31898530728" ["scc-num-nodes"=1,label="32 bytes
5 objects, 160 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) ->
20: sv (ref) nil
24: s (ref) nil
val maybe realizes if str'ed",shape=box];
"31898491384" ["scc-num-nodes"=1,label="144 bytes
33 objects, 912 bytes reachable
this object in no reference cycles
array of 32 j.l.Object

[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 2 ...",shape=box];
"31934096080" ["scc-num-nodes"=1,label="32 bytes
40 objects, 1128 bytes reachable
this object in no reference cycles
c.l.ChunkedCons
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: chunk (ref) ->
28: _more (ref) ->
val maybe realizes if str'ed",shape=box];
"31896926648" ["scc-num-nodes"=1,label="32 bytes
41 objects, 1160 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) nil
20: sv (ref) nil
24: s (ref) ->
val maybe realizes if str'ed",shape=box];
"31896926400" ["scc-num-nodes"=1,label="24 bytes
1 object, 24 bytes reachable
this object in no reference cycles
c.l.LongRange$1
16: val$end (long) 1000
val maybe realizes if str'ed",shape=box];
"31934096712" ["scc-num-nodes"=1,label="24 bytes
44 objects, 1240 bytes reachable
this object in no reference cycles
array of 2 j.l.Object

val maybe realizes if str'ed",shape=box];
"31934096112" ["scc-num-nodes"=1,label="24 bytes
34 objects, 936 bytes reachable
this object in no reference cycles
c.l.ArrayChunk
12: off (int) 20
16: end (int) 32
20: array (ref) ->
val maybe realizes if str'ed",shape=box];
"31898530760" ["scc-num-nodes"=1,label="24 bytes
4 objects, 128 bytes reachable
this object in no reference cycles
clojure.core$map$fn__5866
12: __methodImplCache (ref) nil
16: f (ref) ->
20: coll (ref) ->
val maybe realizes if str'ed",shape=box];
"31898530704" ["scc-num-nodes"=1,label="24 bytes
34 objects, 936 bytes reachable
this object in no reference cycles
c.l.ArrayChunk
12: off (int) 0
16: end (int) 32
20: array (ref) ->
val maybe realizes if str'ed",shape=box];
"31934096736" ["scc-num-nodes"=1,style=filled,label="40 bytes
48 objects, 1464 bytes reachable
this object in no reference cycles
c.l.PersistentVector
12: _hash (int) 0
16: _hasheq (int) 0
20: cnt (int) 2
24: shift (int) 5
28: root (ref) ->
32: tail (ref) ->
36: _meta (ref) nil
val maybe realizes if str'ed",shape=box];
"28996845768" ["scc-num-nodes"=1,label="144 bytes
1 object, 144 bytes reachable
this object in no reference cycles
array of 32 j.l.Object

[nil nil nil nil nil nil nil nil nil nil nil nil n ...",shape=box];
"31898530784" -> "31898530704" ["field-name"=chunk,label=chunk];
"31898530784" -> "31898530728" ["field-name"=_more,label=_more];
"31898491264" -> "31896926400" ["field-name"=boundsCheck,label=boundsCheck];
"28991038320" -> "28992354792" ["field-name"=edit,label=edit];
"28991038320" -> "28996845768" ["field-name"=array,label=array];
"31898530728" -> "31898530760" ["field-name"=fn,label=fn];
"31934096080" -> "31934096112" ["field-name"=chunk,label=chunk];
"31934096080" -> "31898530728" ["field-name"=_more,label=_more];
"31896926648" -> "31898530784" ["field-name"=s,label=s];
"31934096712" -> "31896926648" ["field-name"="[0]",label="[0]"];
"31934096712" -> "31934096080" ["field-name"="[1]",label="[1]"];
"31934096112" -> "31898491384" ["field-name"=array,label=array];
"31898530760" -> "31896926152" ["field-name"=f,label=f];
"31898530760" -> "31898491264" ["field-name"=coll,label=coll];
"31898530704" -> "31898491384" ["field-name"=array,label=array];
"31934096736" -> "28991038320" ["field-name"=root,label=root];
"31934096736" -> "31934096712" ["field-name"=tail,label=tail];
} 