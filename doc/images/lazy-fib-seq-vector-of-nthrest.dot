digraph {
graph [layout=dot,rankdir=LR];
"28991464632" ["scc-num-nodes"=1,label="24 bytes
1 object, 24 bytes reachable
this object in no reference cycles
j.l.Long
16: value (long) 2
2",shape=box];
"32269421896" ["scc-num-nodes"=1,label="24 bytes
3 objects, 72 bytes reachable
this object in no reference cycles
user$fib_fn$fn__7006
12: __methodImplCache (ref) nil
16: a (ref) ->
20: b (ref) ->
val maybe realizes if str'ed",shape=box];
"28991406664" ["scc-num-nodes"=1,label="24 bytes
1 object, 24 bytes reachable
this object in no reference cycles
j.l.Long
16: value (long) 0
0",shape=box];
"32269421736" ["scc-num-nodes"=1,label="32 bytes
9 objects, 256 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) nil
20: sv (ref) nil
24: s (ref) ->
val maybe realizes if str'ed",shape=box];
"32269421864" ["scc-num-nodes"=1,label="32 bytes
4 objects, 104 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) ->
20: sv (ref) nil
24: s (ref) nil
val maybe realizes if str'ed",shape=box];
"28991464656" ["scc-num-nodes"=1,label="24 bytes
1 object, 24 bytes reachable
this object in no reference cycles
j.l.Long
16: value (long) 1
1",shape=box];
"28992354792" ["scc-num-nodes"=1,label="16 bytes
1 object, 16 bytes reachable
this object in no reference cycles
j.u.c.atomic.AtomicReference
12: value (ref) nil
val maybe realizes if str'ed",shape=box];
"28991038320" ["scc-num-nodes"=1,label="24 bytes
3 objects, 184 bytes reachable
this object in no reference cycles
c.l.PersistentVector$Node
12: edit (ref) ->
16: array (ref) ->
val maybe realizes if str'ed",shape=box];
"32269421800" ["scc-num-nodes"=1,label="32 bytes
6 objects, 168 bytes reachable
this object in no reference cycles
c.l.LazySeq
12: _meta (ref) nil
16: fn (ref) nil
20: sv (ref) nil
24: s (ref) ->
val maybe realizes if str'ed",shape=box];
"32269421832" ["scc-num-nodes"=1,label="32 bytes
5 objects, 136 bytes reachable
this object in no reference cycles
c.l.Cons
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: _first (ref) ->
28: _more (ref) ->
val maybe realizes if str'ed",shape=box];
"32269421768" ["scc-num-nodes"=1,label="32 bytes
8 objects, 224 bytes reachable
this object in no reference cycles
c.l.Cons
12: _meta (ref) nil
16: _hash (int) 0
20: _hasheq (int) 0
24: _first (ref) ->
28: _more (ref) ->
val maybe realizes if str'ed",shape=box];
"31894064520" ["scc-num-nodes"=1,style=filled,label="40 bytes
14 objects, 512 bytes reachable
this object in no reference cycles
c.l.PersistentVector
12: _hash (int) 0
16: _hasheq (int) 0
20: cnt (int) 3
24: shift (int) 5
28: root (ref) ->
32: tail (ref) ->
36: _meta (ref) nil
val maybe realizes if str'ed",shape=box];
"31894064488" ["scc-num-nodes"=1,label="32 bytes
10 objects, 288 bytes reachable
this object in no reference cycles
array of 3 j.l.Object

val maybe realizes if str'ed",shape=box];
"28996845768" ["scc-num-nodes"=1,label="144 bytes
1 object, 144 bytes reachable
this object in no reference cycles
array of 32 j.l.Object

[nil nil nil nil nil nil nil nil nil nil nil nil n ...",shape=box];
"32269421896" -> "28991464656" ["field-name"=a,label=a];
"32269421896" -> "28991464632" ["field-name"=b,label=b];
"32269421736" -> "32269421768" ["field-name"=s,label=s];
"32269421864" -> "32269421896" ["field-name"=fn,label=fn];
"28991038320" -> "28992354792" ["field-name"=edit,label=edit];
"28991038320" -> "28996845768" ["field-name"=array,label=array];
"32269421800" -> "32269421832" ["field-name"=s,label=s];
"32269421832" -> "28991464656" ["field-name"=_first,label=_first];
"32269421832" -> "32269421864" ["field-name"=_more,label=_more];
"32269421768" -> "28991406664" ["field-name"=_first,label=_first];
"32269421768" -> "32269421800" ["field-name"=_more,label=_more];
"31894064520" -> "28991038320" ["field-name"=root,label=root];
"31894064520" -> "31894064488" ["field-name"=tail,label=tail];
"31894064488" -> "32269421736" ["field-name"="[0]",label="[0]"];
"31894064488" -> "32269421800" ["field-name"="[1]",label="[1]"];
"31894064488" -> "32269421864" ["field-name"="[2]",label="[2]"];
} 